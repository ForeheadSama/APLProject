Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARRAY
    BREAK
    CONTINUE
    DICTIONARY
    FOREACH
    MAP
    NOT
    OR
    SET
    THEN
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement_list_opt -> statement_list
Rule 5     statement_list_opt -> empty
Rule 6     statement -> declaration_stmt
Rule 7     statement -> assignment_stmt
Rule 8     statement -> function_def_stmt
Rule 9     statement -> function_call_stmt
Rule 10    statement -> if_stmt
Rule 11    statement -> while_stmt
Rule 12    statement -> return_stmt
Rule 13    declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL
Rule 14    type_specifier -> INT_TYPE
Rule 15    type_specifier -> FLOAT_TYPE
Rule 16    type_specifier -> STRING_TYPE
Rule 17    type_specifier -> BOOL_TYPE
Rule 18    type_specifier -> DATE_TYPE
Rule 19    type_specifier -> TIME_TYPE
Rule 20    type_specifier -> VOID
Rule 21    assignment_stmt -> IDENTIFIER EQUALS expression EOL
Rule 22    function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt
Rule 23    param_list -> param_list COMMA param
Rule 24    param_list -> param
Rule 25    param_list -> empty
Rule 26    param -> type_specifier IDENTIFIER
Rule 27    block_stmt -> LBRACKET statement_list_opt RBRACKET
Rule 28    callable -> IDENTIFIER
Rule 29    callable -> BOOK
Rule 30    callable -> GEN
Rule 31    callable -> REG
Rule 32    callable -> DISPLAY
Rule 33    function_call_stmt -> function_call EOL
Rule 34    function_call -> callable LPAREN arg_list RPAREN
Rule 35    arg_list -> arg_list COMMA expression
Rule 36    arg_list -> expression
Rule 37    arg_list -> empty
Rule 38    if_stmt -> IF LPAREN expression RPAREN block_stmt
Rule 39    if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt
Rule 40    while_stmt -> WHILE LPAREN expression RPAREN block_stmt
Rule 41    return_stmt -> RETURN expression EOL
Rule 42    expression -> expression PLUS expression
Rule 43    expression -> expression MINUS expression
Rule 44    expression -> expression TIMES expression
Rule 45    expression -> expression DIVIDE expression
Rule 46    expression -> expression LE expression
Rule 47    expression -> expression GE expression
Rule 48    expression -> expression LT expression
Rule 49    expression -> expression GT expression
Rule 50    expression -> expression EQ expression
Rule 51    expression -> expression NEQ expression
Rule 52    expression -> LPAREN expression RPAREN
Rule 53    expression -> NUMBER
Rule 54    expression -> FLOAT_NUM
Rule 55    expression -> STRING_LITERAL
Rule 56    expression -> BOOLEAN_VAL
Rule 57    expression -> DATE_VAL
Rule 58    expression -> TIME_VAL
Rule 59    expression -> IDENTIFIER
Rule 60    expression -> function_call
Rule 61    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARRAY                : 
BOOK                 : 29
BOOLEAN_VAL          : 56
BOOL_TYPE            : 17
BREAK                : 
COMMA                : 23 35
CONTINUE             : 
DATE_TYPE            : 18
DATE_VAL             : 57
DICTIONARY           : 
DISPLAY              : 32
DIVIDE               : 45
ELSE                 : 39
EOL                  : 13 21 33 41
EQ                   : 50
EQUALS               : 13 21
FLOAT_NUM            : 54
FLOAT_TYPE           : 15
FOREACH              : 
FUNCTION             : 22
GE                   : 47
GEN                  : 30
GT                   : 49
IDENTIFIER           : 13 21 22 26 28 59
IF                   : 38 39
INT_TYPE             : 14
LBRACKET             : 27
LE                   : 46
LPAREN               : 22 34 38 39 40 52
LT                   : 48
MAP                  : 
MINUS                : 43
NEQ                  : 51
NOT                  : 
NUMBER               : 53
OR                   : 
PLUS                 : 42
RBRACKET             : 27
REG                  : 31
RETURN               : 41
RPAREN               : 22 34 38 39 40 52
SET                  : 
STRING_LITERAL       : 55
STRING_TYPE          : 16
THEN                 : 
TIMES                : 44
TIME_TYPE            : 19
TIME_VAL             : 58
UNTIL                : 
VOID                 : 20
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

arg_list             : 34 35
assignment_stmt      : 7
block_stmt           : 22 38 39 39 40
callable             : 34
declaration_stmt     : 6
empty                : 5 25 37
expression           : 13 21 35 36 38 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52
function_call        : 33 60
function_call_stmt   : 9
function_def_stmt    : 8
if_stmt              : 10
param                : 23 24
param_list           : 22 23
program              : 0
return_stmt          : 12
statement            : 2 3
statement_list       : 1 2 4
statement_list_opt   : 27
type_specifier       : 13 22 26
while_stmt           : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (6) statement -> . declaration_stmt
    (7) statement -> . assignment_stmt
    (8) statement -> . function_def_stmt
    (9) statement -> . function_call_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . return_stmt
    (13) declaration_stmt -> . type_specifier IDENTIFIER EQUALS expression EOL
    (21) assignment_stmt -> . IDENTIFIER EQUALS expression EOL
    (22) function_def_stmt -> . FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt
    (33) function_call_stmt -> . function_call EOL
    (38) if_stmt -> . IF LPAREN expression RPAREN block_stmt
    (39) if_stmt -> . IF LPAREN expression RPAREN block_stmt ELSE block_stmt
    (40) while_stmt -> . WHILE LPAREN expression RPAREN block_stmt
    (41) return_stmt -> . RETURN expression EOL
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    IDENTIFIER      shift and go to state 12
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration_stmt               shift and go to state 4
    assignment_stmt                shift and go to state 5
    function_def_stmt              shift and go to state 6
    function_call_stmt             shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    return_stmt                    shift and go to state 10
    type_specifier                 shift and go to state 11
    function_call                  shift and go to state 14
    callable                       shift and go to state 25

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (6) statement -> . declaration_stmt
    (7) statement -> . assignment_stmt
    (8) statement -> . function_def_stmt
    (9) statement -> . function_call_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . return_stmt
    (13) declaration_stmt -> . type_specifier IDENTIFIER EQUALS expression EOL
    (21) assignment_stmt -> . IDENTIFIER EQUALS expression EOL
    (22) function_def_stmt -> . FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt
    (33) function_call_stmt -> . function_call EOL
    (38) if_stmt -> . IF LPAREN expression RPAREN block_stmt
    (39) if_stmt -> . IF LPAREN expression RPAREN block_stmt ELSE block_stmt
    (40) while_stmt -> . WHILE LPAREN expression RPAREN block_stmt
    (41) return_stmt -> . RETURN expression EOL
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 12
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    statement                      shift and go to state 30
    declaration_stmt               shift and go to state 4
    assignment_stmt                shift and go to state 5
    function_def_stmt              shift and go to state 6
    function_call_stmt             shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    return_stmt                    shift and go to state 10
    type_specifier                 shift and go to state 11
    function_call                  shift and go to state 14
    callable                       shift and go to state 25

state 3

    (3) statement_list -> statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    FUNCTION        reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    INT_TYPE        reduce using rule 3 (statement_list -> statement .)
    FLOAT_TYPE      reduce using rule 3 (statement_list -> statement .)
    STRING_TYPE     reduce using rule 3 (statement_list -> statement .)
    BOOL_TYPE       reduce using rule 3 (statement_list -> statement .)
    DATE_TYPE       reduce using rule 3 (statement_list -> statement .)
    TIME_TYPE       reduce using rule 3 (statement_list -> statement .)
    VOID            reduce using rule 3 (statement_list -> statement .)
    BOOK            reduce using rule 3 (statement_list -> statement .)
    GEN             reduce using rule 3 (statement_list -> statement .)
    REG             reduce using rule 3 (statement_list -> statement .)
    DISPLAY         reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACKET        reduce using rule 3 (statement_list -> statement .)


state 4

    (6) statement -> declaration_stmt .

    IDENTIFIER      reduce using rule 6 (statement -> declaration_stmt .)
    FUNCTION        reduce using rule 6 (statement -> declaration_stmt .)
    IF              reduce using rule 6 (statement -> declaration_stmt .)
    WHILE           reduce using rule 6 (statement -> declaration_stmt .)
    RETURN          reduce using rule 6 (statement -> declaration_stmt .)
    INT_TYPE        reduce using rule 6 (statement -> declaration_stmt .)
    FLOAT_TYPE      reduce using rule 6 (statement -> declaration_stmt .)
    STRING_TYPE     reduce using rule 6 (statement -> declaration_stmt .)
    BOOL_TYPE       reduce using rule 6 (statement -> declaration_stmt .)
    DATE_TYPE       reduce using rule 6 (statement -> declaration_stmt .)
    TIME_TYPE       reduce using rule 6 (statement -> declaration_stmt .)
    VOID            reduce using rule 6 (statement -> declaration_stmt .)
    BOOK            reduce using rule 6 (statement -> declaration_stmt .)
    GEN             reduce using rule 6 (statement -> declaration_stmt .)
    REG             reduce using rule 6 (statement -> declaration_stmt .)
    DISPLAY         reduce using rule 6 (statement -> declaration_stmt .)
    $end            reduce using rule 6 (statement -> declaration_stmt .)
    RBRACKET        reduce using rule 6 (statement -> declaration_stmt .)


state 5

    (7) statement -> assignment_stmt .

    IDENTIFIER      reduce using rule 7 (statement -> assignment_stmt .)
    FUNCTION        reduce using rule 7 (statement -> assignment_stmt .)
    IF              reduce using rule 7 (statement -> assignment_stmt .)
    WHILE           reduce using rule 7 (statement -> assignment_stmt .)
    RETURN          reduce using rule 7 (statement -> assignment_stmt .)
    INT_TYPE        reduce using rule 7 (statement -> assignment_stmt .)
    FLOAT_TYPE      reduce using rule 7 (statement -> assignment_stmt .)
    STRING_TYPE     reduce using rule 7 (statement -> assignment_stmt .)
    BOOL_TYPE       reduce using rule 7 (statement -> assignment_stmt .)
    DATE_TYPE       reduce using rule 7 (statement -> assignment_stmt .)
    TIME_TYPE       reduce using rule 7 (statement -> assignment_stmt .)
    VOID            reduce using rule 7 (statement -> assignment_stmt .)
    BOOK            reduce using rule 7 (statement -> assignment_stmt .)
    GEN             reduce using rule 7 (statement -> assignment_stmt .)
    REG             reduce using rule 7 (statement -> assignment_stmt .)
    DISPLAY         reduce using rule 7 (statement -> assignment_stmt .)
    $end            reduce using rule 7 (statement -> assignment_stmt .)
    RBRACKET        reduce using rule 7 (statement -> assignment_stmt .)


state 6

    (8) statement -> function_def_stmt .

    IDENTIFIER      reduce using rule 8 (statement -> function_def_stmt .)
    FUNCTION        reduce using rule 8 (statement -> function_def_stmt .)
    IF              reduce using rule 8 (statement -> function_def_stmt .)
    WHILE           reduce using rule 8 (statement -> function_def_stmt .)
    RETURN          reduce using rule 8 (statement -> function_def_stmt .)
    INT_TYPE        reduce using rule 8 (statement -> function_def_stmt .)
    FLOAT_TYPE      reduce using rule 8 (statement -> function_def_stmt .)
    STRING_TYPE     reduce using rule 8 (statement -> function_def_stmt .)
    BOOL_TYPE       reduce using rule 8 (statement -> function_def_stmt .)
    DATE_TYPE       reduce using rule 8 (statement -> function_def_stmt .)
    TIME_TYPE       reduce using rule 8 (statement -> function_def_stmt .)
    VOID            reduce using rule 8 (statement -> function_def_stmt .)
    BOOK            reduce using rule 8 (statement -> function_def_stmt .)
    GEN             reduce using rule 8 (statement -> function_def_stmt .)
    REG             reduce using rule 8 (statement -> function_def_stmt .)
    DISPLAY         reduce using rule 8 (statement -> function_def_stmt .)
    $end            reduce using rule 8 (statement -> function_def_stmt .)
    RBRACKET        reduce using rule 8 (statement -> function_def_stmt .)


state 7

    (9) statement -> function_call_stmt .

    IDENTIFIER      reduce using rule 9 (statement -> function_call_stmt .)
    FUNCTION        reduce using rule 9 (statement -> function_call_stmt .)
    IF              reduce using rule 9 (statement -> function_call_stmt .)
    WHILE           reduce using rule 9 (statement -> function_call_stmt .)
    RETURN          reduce using rule 9 (statement -> function_call_stmt .)
    INT_TYPE        reduce using rule 9 (statement -> function_call_stmt .)
    FLOAT_TYPE      reduce using rule 9 (statement -> function_call_stmt .)
    STRING_TYPE     reduce using rule 9 (statement -> function_call_stmt .)
    BOOL_TYPE       reduce using rule 9 (statement -> function_call_stmt .)
    DATE_TYPE       reduce using rule 9 (statement -> function_call_stmt .)
    TIME_TYPE       reduce using rule 9 (statement -> function_call_stmt .)
    VOID            reduce using rule 9 (statement -> function_call_stmt .)
    BOOK            reduce using rule 9 (statement -> function_call_stmt .)
    GEN             reduce using rule 9 (statement -> function_call_stmt .)
    REG             reduce using rule 9 (statement -> function_call_stmt .)
    DISPLAY         reduce using rule 9 (statement -> function_call_stmt .)
    $end            reduce using rule 9 (statement -> function_call_stmt .)
    RBRACKET        reduce using rule 9 (statement -> function_call_stmt .)


state 8

    (10) statement -> if_stmt .

    IDENTIFIER      reduce using rule 10 (statement -> if_stmt .)
    FUNCTION        reduce using rule 10 (statement -> if_stmt .)
    IF              reduce using rule 10 (statement -> if_stmt .)
    WHILE           reduce using rule 10 (statement -> if_stmt .)
    RETURN          reduce using rule 10 (statement -> if_stmt .)
    INT_TYPE        reduce using rule 10 (statement -> if_stmt .)
    FLOAT_TYPE      reduce using rule 10 (statement -> if_stmt .)
    STRING_TYPE     reduce using rule 10 (statement -> if_stmt .)
    BOOL_TYPE       reduce using rule 10 (statement -> if_stmt .)
    DATE_TYPE       reduce using rule 10 (statement -> if_stmt .)
    TIME_TYPE       reduce using rule 10 (statement -> if_stmt .)
    VOID            reduce using rule 10 (statement -> if_stmt .)
    BOOK            reduce using rule 10 (statement -> if_stmt .)
    GEN             reduce using rule 10 (statement -> if_stmt .)
    REG             reduce using rule 10 (statement -> if_stmt .)
    DISPLAY         reduce using rule 10 (statement -> if_stmt .)
    $end            reduce using rule 10 (statement -> if_stmt .)
    RBRACKET        reduce using rule 10 (statement -> if_stmt .)


state 9

    (11) statement -> while_stmt .

    IDENTIFIER      reduce using rule 11 (statement -> while_stmt .)
    FUNCTION        reduce using rule 11 (statement -> while_stmt .)
    IF              reduce using rule 11 (statement -> while_stmt .)
    WHILE           reduce using rule 11 (statement -> while_stmt .)
    RETURN          reduce using rule 11 (statement -> while_stmt .)
    INT_TYPE        reduce using rule 11 (statement -> while_stmt .)
    FLOAT_TYPE      reduce using rule 11 (statement -> while_stmt .)
    STRING_TYPE     reduce using rule 11 (statement -> while_stmt .)
    BOOL_TYPE       reduce using rule 11 (statement -> while_stmt .)
    DATE_TYPE       reduce using rule 11 (statement -> while_stmt .)
    TIME_TYPE       reduce using rule 11 (statement -> while_stmt .)
    VOID            reduce using rule 11 (statement -> while_stmt .)
    BOOK            reduce using rule 11 (statement -> while_stmt .)
    GEN             reduce using rule 11 (statement -> while_stmt .)
    REG             reduce using rule 11 (statement -> while_stmt .)
    DISPLAY         reduce using rule 11 (statement -> while_stmt .)
    $end            reduce using rule 11 (statement -> while_stmt .)
    RBRACKET        reduce using rule 11 (statement -> while_stmt .)


state 10

    (12) statement -> return_stmt .

    IDENTIFIER      reduce using rule 12 (statement -> return_stmt .)
    FUNCTION        reduce using rule 12 (statement -> return_stmt .)
    IF              reduce using rule 12 (statement -> return_stmt .)
    WHILE           reduce using rule 12 (statement -> return_stmt .)
    RETURN          reduce using rule 12 (statement -> return_stmt .)
    INT_TYPE        reduce using rule 12 (statement -> return_stmt .)
    FLOAT_TYPE      reduce using rule 12 (statement -> return_stmt .)
    STRING_TYPE     reduce using rule 12 (statement -> return_stmt .)
    BOOL_TYPE       reduce using rule 12 (statement -> return_stmt .)
    DATE_TYPE       reduce using rule 12 (statement -> return_stmt .)
    TIME_TYPE       reduce using rule 12 (statement -> return_stmt .)
    VOID            reduce using rule 12 (statement -> return_stmt .)
    BOOK            reduce using rule 12 (statement -> return_stmt .)
    GEN             reduce using rule 12 (statement -> return_stmt .)
    REG             reduce using rule 12 (statement -> return_stmt .)
    DISPLAY         reduce using rule 12 (statement -> return_stmt .)
    $end            reduce using rule 12 (statement -> return_stmt .)
    RBRACKET        reduce using rule 12 (statement -> return_stmt .)


state 11

    (13) declaration_stmt -> type_specifier . IDENTIFIER EQUALS expression EOL

    IDENTIFIER      shift and go to state 31


state 12

    (21) assignment_stmt -> IDENTIFIER . EQUALS expression EOL
    (28) callable -> IDENTIFIER .

    EQUALS          shift and go to state 32
    LPAREN          reduce using rule 28 (callable -> IDENTIFIER .)


state 13

    (22) function_def_stmt -> FUNCTION . type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID

    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24

    type_specifier                 shift and go to state 33

state 14

    (33) function_call_stmt -> function_call . EOL

    EOL             shift and go to state 34


state 15

    (38) if_stmt -> IF . LPAREN expression RPAREN block_stmt
    (39) if_stmt -> IF . LPAREN expression RPAREN block_stmt ELSE block_stmt

    LPAREN          shift and go to state 35


state 16

    (40) while_stmt -> WHILE . LPAREN expression RPAREN block_stmt

    LPAREN          shift and go to state 36


state 17

    (41) return_stmt -> RETURN . expression EOL
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 37
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 18

    (14) type_specifier -> INT_TYPE .

    IDENTIFIER      reduce using rule 14 (type_specifier -> INT_TYPE .)


state 19

    (15) type_specifier -> FLOAT_TYPE .

    IDENTIFIER      reduce using rule 15 (type_specifier -> FLOAT_TYPE .)


state 20

    (16) type_specifier -> STRING_TYPE .

    IDENTIFIER      reduce using rule 16 (type_specifier -> STRING_TYPE .)


state 21

    (17) type_specifier -> BOOL_TYPE .

    IDENTIFIER      reduce using rule 17 (type_specifier -> BOOL_TYPE .)


state 22

    (18) type_specifier -> DATE_TYPE .

    IDENTIFIER      reduce using rule 18 (type_specifier -> DATE_TYPE .)


state 23

    (19) type_specifier -> TIME_TYPE .

    IDENTIFIER      reduce using rule 19 (type_specifier -> TIME_TYPE .)


state 24

    (20) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 20 (type_specifier -> VOID .)


state 25

    (34) function_call -> callable . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 47


state 26

    (29) callable -> BOOK .

    LPAREN          reduce using rule 29 (callable -> BOOK .)


state 27

    (30) callable -> GEN .

    LPAREN          reduce using rule 30 (callable -> GEN .)


state 28

    (31) callable -> REG .

    LPAREN          reduce using rule 31 (callable -> REG .)


state 29

    (32) callable -> DISPLAY .

    LPAREN          reduce using rule 32 (callable -> DISPLAY .)


state 30

    (2) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    INT_TYPE        reduce using rule 2 (statement_list -> statement_list statement .)
    FLOAT_TYPE      reduce using rule 2 (statement_list -> statement_list statement .)
    STRING_TYPE     reduce using rule 2 (statement_list -> statement_list statement .)
    BOOL_TYPE       reduce using rule 2 (statement_list -> statement_list statement .)
    DATE_TYPE       reduce using rule 2 (statement_list -> statement_list statement .)
    TIME_TYPE       reduce using rule 2 (statement_list -> statement_list statement .)
    VOID            reduce using rule 2 (statement_list -> statement_list statement .)
    BOOK            reduce using rule 2 (statement_list -> statement_list statement .)
    GEN             reduce using rule 2 (statement_list -> statement_list statement .)
    REG             reduce using rule 2 (statement_list -> statement_list statement .)
    DISPLAY         reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACKET        reduce using rule 2 (statement_list -> statement_list statement .)


state 31

    (13) declaration_stmt -> type_specifier IDENTIFIER . EQUALS expression EOL

    EQUALS          shift and go to state 48


state 32

    (21) assignment_stmt -> IDENTIFIER EQUALS . expression EOL
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 49
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 33

    (22) function_def_stmt -> FUNCTION type_specifier . IDENTIFIER LPAREN param_list RPAREN block_stmt

    IDENTIFIER      shift and go to state 50


state 34

    (33) function_call_stmt -> function_call EOL .

    IDENTIFIER      reduce using rule 33 (function_call_stmt -> function_call EOL .)
    FUNCTION        reduce using rule 33 (function_call_stmt -> function_call EOL .)
    IF              reduce using rule 33 (function_call_stmt -> function_call EOL .)
    WHILE           reduce using rule 33 (function_call_stmt -> function_call EOL .)
    RETURN          reduce using rule 33 (function_call_stmt -> function_call EOL .)
    INT_TYPE        reduce using rule 33 (function_call_stmt -> function_call EOL .)
    FLOAT_TYPE      reduce using rule 33 (function_call_stmt -> function_call EOL .)
    STRING_TYPE     reduce using rule 33 (function_call_stmt -> function_call EOL .)
    BOOL_TYPE       reduce using rule 33 (function_call_stmt -> function_call EOL .)
    DATE_TYPE       reduce using rule 33 (function_call_stmt -> function_call EOL .)
    TIME_TYPE       reduce using rule 33 (function_call_stmt -> function_call EOL .)
    VOID            reduce using rule 33 (function_call_stmt -> function_call EOL .)
    BOOK            reduce using rule 33 (function_call_stmt -> function_call EOL .)
    GEN             reduce using rule 33 (function_call_stmt -> function_call EOL .)
    REG             reduce using rule 33 (function_call_stmt -> function_call EOL .)
    DISPLAY         reduce using rule 33 (function_call_stmt -> function_call EOL .)
    $end            reduce using rule 33 (function_call_stmt -> function_call EOL .)
    RBRACKET        reduce using rule 33 (function_call_stmt -> function_call EOL .)


state 35

    (38) if_stmt -> IF LPAREN . expression RPAREN block_stmt
    (39) if_stmt -> IF LPAREN . expression RPAREN block_stmt ELSE block_stmt
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 51
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 36

    (40) while_stmt -> WHILE LPAREN . expression RPAREN block_stmt
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 52
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 37

    (41) return_stmt -> RETURN expression . EOL
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 38

    (52) expression -> LPAREN . expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 64
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 39

    (53) expression -> NUMBER .

    EOL             reduce using rule 53 (expression -> NUMBER .)
    PLUS            reduce using rule 53 (expression -> NUMBER .)
    MINUS           reduce using rule 53 (expression -> NUMBER .)
    TIMES           reduce using rule 53 (expression -> NUMBER .)
    DIVIDE          reduce using rule 53 (expression -> NUMBER .)
    LE              reduce using rule 53 (expression -> NUMBER .)
    GE              reduce using rule 53 (expression -> NUMBER .)
    LT              reduce using rule 53 (expression -> NUMBER .)
    GT              reduce using rule 53 (expression -> NUMBER .)
    EQ              reduce using rule 53 (expression -> NUMBER .)
    NEQ             reduce using rule 53 (expression -> NUMBER .)
    RPAREN          reduce using rule 53 (expression -> NUMBER .)
    COMMA           reduce using rule 53 (expression -> NUMBER .)


state 40

    (54) expression -> FLOAT_NUM .

    EOL             reduce using rule 54 (expression -> FLOAT_NUM .)
    PLUS            reduce using rule 54 (expression -> FLOAT_NUM .)
    MINUS           reduce using rule 54 (expression -> FLOAT_NUM .)
    TIMES           reduce using rule 54 (expression -> FLOAT_NUM .)
    DIVIDE          reduce using rule 54 (expression -> FLOAT_NUM .)
    LE              reduce using rule 54 (expression -> FLOAT_NUM .)
    GE              reduce using rule 54 (expression -> FLOAT_NUM .)
    LT              reduce using rule 54 (expression -> FLOAT_NUM .)
    GT              reduce using rule 54 (expression -> FLOAT_NUM .)
    EQ              reduce using rule 54 (expression -> FLOAT_NUM .)
    NEQ             reduce using rule 54 (expression -> FLOAT_NUM .)
    RPAREN          reduce using rule 54 (expression -> FLOAT_NUM .)
    COMMA           reduce using rule 54 (expression -> FLOAT_NUM .)


state 41

    (55) expression -> STRING_LITERAL .

    EOL             reduce using rule 55 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 55 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 55 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 55 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 55 (expression -> STRING_LITERAL .)
    LE              reduce using rule 55 (expression -> STRING_LITERAL .)
    GE              reduce using rule 55 (expression -> STRING_LITERAL .)
    LT              reduce using rule 55 (expression -> STRING_LITERAL .)
    GT              reduce using rule 55 (expression -> STRING_LITERAL .)
    EQ              reduce using rule 55 (expression -> STRING_LITERAL .)
    NEQ             reduce using rule 55 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 55 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 55 (expression -> STRING_LITERAL .)


state 42

    (56) expression -> BOOLEAN_VAL .

    EOL             reduce using rule 56 (expression -> BOOLEAN_VAL .)
    PLUS            reduce using rule 56 (expression -> BOOLEAN_VAL .)
    MINUS           reduce using rule 56 (expression -> BOOLEAN_VAL .)
    TIMES           reduce using rule 56 (expression -> BOOLEAN_VAL .)
    DIVIDE          reduce using rule 56 (expression -> BOOLEAN_VAL .)
    LE              reduce using rule 56 (expression -> BOOLEAN_VAL .)
    GE              reduce using rule 56 (expression -> BOOLEAN_VAL .)
    LT              reduce using rule 56 (expression -> BOOLEAN_VAL .)
    GT              reduce using rule 56 (expression -> BOOLEAN_VAL .)
    EQ              reduce using rule 56 (expression -> BOOLEAN_VAL .)
    NEQ             reduce using rule 56 (expression -> BOOLEAN_VAL .)
    RPAREN          reduce using rule 56 (expression -> BOOLEAN_VAL .)
    COMMA           reduce using rule 56 (expression -> BOOLEAN_VAL .)


state 43

    (57) expression -> DATE_VAL .

    EOL             reduce using rule 57 (expression -> DATE_VAL .)
    PLUS            reduce using rule 57 (expression -> DATE_VAL .)
    MINUS           reduce using rule 57 (expression -> DATE_VAL .)
    TIMES           reduce using rule 57 (expression -> DATE_VAL .)
    DIVIDE          reduce using rule 57 (expression -> DATE_VAL .)
    LE              reduce using rule 57 (expression -> DATE_VAL .)
    GE              reduce using rule 57 (expression -> DATE_VAL .)
    LT              reduce using rule 57 (expression -> DATE_VAL .)
    GT              reduce using rule 57 (expression -> DATE_VAL .)
    EQ              reduce using rule 57 (expression -> DATE_VAL .)
    NEQ             reduce using rule 57 (expression -> DATE_VAL .)
    RPAREN          reduce using rule 57 (expression -> DATE_VAL .)
    COMMA           reduce using rule 57 (expression -> DATE_VAL .)


state 44

    (58) expression -> TIME_VAL .

    EOL             reduce using rule 58 (expression -> TIME_VAL .)
    PLUS            reduce using rule 58 (expression -> TIME_VAL .)
    MINUS           reduce using rule 58 (expression -> TIME_VAL .)
    TIMES           reduce using rule 58 (expression -> TIME_VAL .)
    DIVIDE          reduce using rule 58 (expression -> TIME_VAL .)
    LE              reduce using rule 58 (expression -> TIME_VAL .)
    GE              reduce using rule 58 (expression -> TIME_VAL .)
    LT              reduce using rule 58 (expression -> TIME_VAL .)
    GT              reduce using rule 58 (expression -> TIME_VAL .)
    EQ              reduce using rule 58 (expression -> TIME_VAL .)
    NEQ             reduce using rule 58 (expression -> TIME_VAL .)
    RPAREN          reduce using rule 58 (expression -> TIME_VAL .)
    COMMA           reduce using rule 58 (expression -> TIME_VAL .)


state 45

    (59) expression -> IDENTIFIER .
    (28) callable -> IDENTIFIER .

    EOL             reduce using rule 59 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 59 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 59 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 59 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 59 (expression -> IDENTIFIER .)
    LE              reduce using rule 59 (expression -> IDENTIFIER .)
    GE              reduce using rule 59 (expression -> IDENTIFIER .)
    LT              reduce using rule 59 (expression -> IDENTIFIER .)
    GT              reduce using rule 59 (expression -> IDENTIFIER .)
    EQ              reduce using rule 59 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 59 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 59 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 59 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 28 (callable -> IDENTIFIER .)


state 46

    (60) expression -> function_call .

    EOL             reduce using rule 60 (expression -> function_call .)
    PLUS            reduce using rule 60 (expression -> function_call .)
    MINUS           reduce using rule 60 (expression -> function_call .)
    TIMES           reduce using rule 60 (expression -> function_call .)
    DIVIDE          reduce using rule 60 (expression -> function_call .)
    LE              reduce using rule 60 (expression -> function_call .)
    GE              reduce using rule 60 (expression -> function_call .)
    LT              reduce using rule 60 (expression -> function_call .)
    GT              reduce using rule 60 (expression -> function_call .)
    EQ              reduce using rule 60 (expression -> function_call .)
    NEQ             reduce using rule 60 (expression -> function_call .)
    RPAREN          reduce using rule 60 (expression -> function_call .)
    COMMA           reduce using rule 60 (expression -> function_call .)


state 47

    (34) function_call -> callable LPAREN . arg_list RPAREN
    (35) arg_list -> . arg_list COMMA expression
    (36) arg_list -> . expression
    (37) arg_list -> . empty
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (61) empty -> .
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    callable                       shift and go to state 25
    arg_list                       shift and go to state 65
    expression                     shift and go to state 66
    empty                          shift and go to state 67
    function_call                  shift and go to state 46

state 48

    (13) declaration_stmt -> type_specifier IDENTIFIER EQUALS . expression EOL
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 68
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 49

    (21) assignment_stmt -> IDENTIFIER EQUALS expression . EOL
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             shift and go to state 69
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 50

    (22) function_def_stmt -> FUNCTION type_specifier IDENTIFIER . LPAREN param_list RPAREN block_stmt

    LPAREN          shift and go to state 70


state 51

    (38) if_stmt -> IF LPAREN expression . RPAREN block_stmt
    (39) if_stmt -> IF LPAREN expression . RPAREN block_stmt ELSE block_stmt
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    RPAREN          shift and go to state 71
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 52

    (40) while_stmt -> WHILE LPAREN expression . RPAREN block_stmt
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    RPAREN          shift and go to state 72
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 53

    (41) return_stmt -> RETURN expression EOL .

    IDENTIFIER      reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    FUNCTION        reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    IF              reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    WHILE           reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    RETURN          reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    INT_TYPE        reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    FLOAT_TYPE      reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    STRING_TYPE     reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    BOOL_TYPE       reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    DATE_TYPE       reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    TIME_TYPE       reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    VOID            reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    BOOK            reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    GEN             reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    REG             reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    DISPLAY         reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    $end            reduce using rule 41 (return_stmt -> RETURN expression EOL .)
    RBRACKET        reduce using rule 41 (return_stmt -> RETURN expression EOL .)


state 54

    (42) expression -> expression PLUS . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 73
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 55

    (43) expression -> expression MINUS . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 74
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 56

    (44) expression -> expression TIMES . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 75
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 57

    (45) expression -> expression DIVIDE . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 76
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 58

    (46) expression -> expression LE . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 77
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 59

    (47) expression -> expression GE . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 78
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 60

    (48) expression -> expression LT . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 79
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 61

    (49) expression -> expression GT . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 80
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 62

    (50) expression -> expression EQ . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 81
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 63

    (51) expression -> expression NEQ . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 82
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 64

    (52) expression -> LPAREN expression . RPAREN
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 65

    (34) function_call -> callable LPAREN arg_list . RPAREN
    (35) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 84
    COMMA           shift and go to state 85


state 66

    (36) arg_list -> expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    RPAREN          reduce using rule 36 (arg_list -> expression .)
    COMMA           reduce using rule 36 (arg_list -> expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 67

    (37) arg_list -> empty .

    RPAREN          reduce using rule 37 (arg_list -> empty .)
    COMMA           reduce using rule 37 (arg_list -> empty .)


state 68

    (13) declaration_stmt -> type_specifier IDENTIFIER EQUALS expression . EOL
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             shift and go to state 86
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 69

    (21) assignment_stmt -> IDENTIFIER EQUALS expression EOL .

    IDENTIFIER      reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    FUNCTION        reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    IF              reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    WHILE           reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    RETURN          reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    INT_TYPE        reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    FLOAT_TYPE      reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    STRING_TYPE     reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    BOOL_TYPE       reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    DATE_TYPE       reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    TIME_TYPE       reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    VOID            reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    BOOK            reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    GEN             reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    REG             reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    DISPLAY         reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    $end            reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)
    RBRACKET        reduce using rule 21 (assignment_stmt -> IDENTIFIER EQUALS expression EOL .)


state 70

    (22) function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN . param_list RPAREN block_stmt
    (23) param_list -> . param_list COMMA param
    (24) param_list -> . param
    (25) param_list -> . empty
    (26) param -> . type_specifier IDENTIFIER
    (61) empty -> .
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID

    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)
    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24

    type_specifier                 shift and go to state 87
    param_list                     shift and go to state 88
    param                          shift and go to state 89
    empty                          shift and go to state 90

state 71

    (38) if_stmt -> IF LPAREN expression RPAREN . block_stmt
    (39) if_stmt -> IF LPAREN expression RPAREN . block_stmt ELSE block_stmt
    (27) block_stmt -> . LBRACKET statement_list_opt RBRACKET

    LBRACKET        shift and go to state 92

    block_stmt                     shift and go to state 91

state 72

    (40) while_stmt -> WHILE LPAREN expression RPAREN . block_stmt
    (27) block_stmt -> . LBRACKET statement_list_opt RBRACKET

    LBRACKET        shift and go to state 92

    block_stmt                     shift and go to state 93

state 73

    (42) expression -> expression PLUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 42 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 42 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 42 (expression -> expression PLUS expression .)
    LE              reduce using rule 42 (expression -> expression PLUS expression .)
    GE              reduce using rule 42 (expression -> expression PLUS expression .)
    LT              reduce using rule 42 (expression -> expression PLUS expression .)
    GT              reduce using rule 42 (expression -> expression PLUS expression .)
    EQ              reduce using rule 42 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 42 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 42 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 42 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! TIMES           [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 74

    (43) expression -> expression MINUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 43 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 43 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 43 (expression -> expression MINUS expression .)
    LE              reduce using rule 43 (expression -> expression MINUS expression .)
    GE              reduce using rule 43 (expression -> expression MINUS expression .)
    LT              reduce using rule 43 (expression -> expression MINUS expression .)
    GT              reduce using rule 43 (expression -> expression MINUS expression .)
    EQ              reduce using rule 43 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 43 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 43 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 43 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! TIMES           [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 75

    (44) expression -> expression TIMES expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 44 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 44 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 44 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 44 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 44 (expression -> expression TIMES expression .)
    LE              reduce using rule 44 (expression -> expression TIMES expression .)
    GE              reduce using rule 44 (expression -> expression TIMES expression .)
    LT              reduce using rule 44 (expression -> expression TIMES expression .)
    GT              reduce using rule 44 (expression -> expression TIMES expression .)
    EQ              reduce using rule 44 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 44 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 44 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 44 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 76

    (45) expression -> expression DIVIDE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 45 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 45 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 45 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 45 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 45 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 45 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 45 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 45 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 45 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 45 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 45 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 77

    (46) expression -> expression LE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 46 (expression -> expression LE expression .)
    LE              reduce using rule 46 (expression -> expression LE expression .)
    GE              reduce using rule 46 (expression -> expression LE expression .)
    LT              reduce using rule 46 (expression -> expression LE expression .)
    GT              reduce using rule 46 (expression -> expression LE expression .)
    EQ              reduce using rule 46 (expression -> expression LE expression .)
    NEQ             reduce using rule 46 (expression -> expression LE expression .)
    RPAREN          reduce using rule 46 (expression -> expression LE expression .)
    COMMA           reduce using rule 46 (expression -> expression LE expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! PLUS            [ reduce using rule 46 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression LE expression .) ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 78

    (47) expression -> expression GE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 47 (expression -> expression GE expression .)
    LE              reduce using rule 47 (expression -> expression GE expression .)
    GE              reduce using rule 47 (expression -> expression GE expression .)
    LT              reduce using rule 47 (expression -> expression GE expression .)
    GT              reduce using rule 47 (expression -> expression GE expression .)
    EQ              reduce using rule 47 (expression -> expression GE expression .)
    NEQ             reduce using rule 47 (expression -> expression GE expression .)
    RPAREN          reduce using rule 47 (expression -> expression GE expression .)
    COMMA           reduce using rule 47 (expression -> expression GE expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! PLUS            [ reduce using rule 47 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression GE expression .) ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 79

    (48) expression -> expression LT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 48 (expression -> expression LT expression .)
    LE              reduce using rule 48 (expression -> expression LT expression .)
    GE              reduce using rule 48 (expression -> expression LT expression .)
    LT              reduce using rule 48 (expression -> expression LT expression .)
    GT              reduce using rule 48 (expression -> expression LT expression .)
    EQ              reduce using rule 48 (expression -> expression LT expression .)
    NEQ             reduce using rule 48 (expression -> expression LT expression .)
    RPAREN          reduce using rule 48 (expression -> expression LT expression .)
    COMMA           reduce using rule 48 (expression -> expression LT expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! PLUS            [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 80

    (49) expression -> expression GT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 49 (expression -> expression GT expression .)
    LE              reduce using rule 49 (expression -> expression GT expression .)
    GE              reduce using rule 49 (expression -> expression GT expression .)
    LT              reduce using rule 49 (expression -> expression GT expression .)
    GT              reduce using rule 49 (expression -> expression GT expression .)
    EQ              reduce using rule 49 (expression -> expression GT expression .)
    NEQ             reduce using rule 49 (expression -> expression GT expression .)
    RPAREN          reduce using rule 49 (expression -> expression GT expression .)
    COMMA           reduce using rule 49 (expression -> expression GT expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! PLUS            [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 81

    (50) expression -> expression EQ expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 50 (expression -> expression EQ expression .)
    LE              reduce using rule 50 (expression -> expression EQ expression .)
    GE              reduce using rule 50 (expression -> expression EQ expression .)
    LT              reduce using rule 50 (expression -> expression EQ expression .)
    GT              reduce using rule 50 (expression -> expression EQ expression .)
    EQ              reduce using rule 50 (expression -> expression EQ expression .)
    NEQ             reduce using rule 50 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 50 (expression -> expression EQ expression .)
    COMMA           reduce using rule 50 (expression -> expression EQ expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! PLUS            [ reduce using rule 50 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression EQ expression .) ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 82

    (51) expression -> expression NEQ expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    EOL             reduce using rule 51 (expression -> expression NEQ expression .)
    LE              reduce using rule 51 (expression -> expression NEQ expression .)
    GE              reduce using rule 51 (expression -> expression NEQ expression .)
    LT              reduce using rule 51 (expression -> expression NEQ expression .)
    GT              reduce using rule 51 (expression -> expression NEQ expression .)
    EQ              reduce using rule 51 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 51 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 51 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 51 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! PLUS            [ reduce using rule 51 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression NEQ expression .) ]
  ! LE              [ shift and go to state 58 ]
  ! GE              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GT              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 63 ]


state 83

    (52) expression -> LPAREN expression RPAREN .

    EOL             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 52 (expression -> LPAREN expression RPAREN .)


state 84

    (34) function_call -> callable LPAREN arg_list RPAREN .

    EOL             reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    LE              reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    GE              reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    LT              reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    GT              reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    EQ              reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 34 (function_call -> callable LPAREN arg_list RPAREN .)


state 85

    (35) arg_list -> arg_list COMMA . expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression LE expression
    (47) expression -> . expression GE expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression EQ expression
    (51) expression -> . expression NEQ expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . NUMBER
    (54) expression -> . FLOAT_NUM
    (55) expression -> . STRING_LITERAL
    (56) expression -> . BOOLEAN_VAL
    (57) expression -> . DATE_VAL
    (58) expression -> . TIME_VAL
    (59) expression -> . IDENTIFIER
    (60) expression -> . function_call
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 39
    FLOAT_NUM       shift and go to state 40
    STRING_LITERAL  shift and go to state 41
    BOOLEAN_VAL     shift and go to state 42
    DATE_VAL        shift and go to state 43
    TIME_VAL        shift and go to state 44
    IDENTIFIER      shift and go to state 45
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    expression                     shift and go to state 94
    function_call                  shift and go to state 46
    callable                       shift and go to state 25

state 86

    (13) declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .

    IDENTIFIER      reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    FUNCTION        reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    IF              reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    WHILE           reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    RETURN          reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    INT_TYPE        reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    FLOAT_TYPE      reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    STRING_TYPE     reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    BOOL_TYPE       reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    DATE_TYPE       reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    TIME_TYPE       reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    VOID            reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    BOOK            reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    GEN             reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    REG             reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    DISPLAY         reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    $end            reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)
    RBRACKET        reduce using rule 13 (declaration_stmt -> type_specifier IDENTIFIER EQUALS expression EOL .)


state 87

    (26) param -> type_specifier . IDENTIFIER

    IDENTIFIER      shift and go to state 95


state 88

    (22) function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list . RPAREN block_stmt
    (23) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97


state 89

    (24) param_list -> param .

    RPAREN          reduce using rule 24 (param_list -> param .)
    COMMA           reduce using rule 24 (param_list -> param .)


state 90

    (25) param_list -> empty .

    RPAREN          reduce using rule 25 (param_list -> empty .)
    COMMA           reduce using rule 25 (param_list -> empty .)


state 91

    (38) if_stmt -> IF LPAREN expression RPAREN block_stmt .
    (39) if_stmt -> IF LPAREN expression RPAREN block_stmt . ELSE block_stmt

    IDENTIFIER      reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    FUNCTION        reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    IF              reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    WHILE           reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    RETURN          reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    INT_TYPE        reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    FLOAT_TYPE      reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    STRING_TYPE     reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    BOOL_TYPE       reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    DATE_TYPE       reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    TIME_TYPE       reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    VOID            reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    BOOK            reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    GEN             reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    REG             reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    DISPLAY         reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    $end            reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    RBRACKET        reduce using rule 38 (if_stmt -> IF LPAREN expression RPAREN block_stmt .)
    ELSE            shift and go to state 98


state 92

    (27) block_stmt -> LBRACKET . statement_list_opt RBRACKET
    (4) statement_list_opt -> . statement_list
    (5) statement_list_opt -> . empty
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (61) empty -> .
    (6) statement -> . declaration_stmt
    (7) statement -> . assignment_stmt
    (8) statement -> . function_def_stmt
    (9) statement -> . function_call_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . return_stmt
    (13) declaration_stmt -> . type_specifier IDENTIFIER EQUALS expression EOL
    (21) assignment_stmt -> . IDENTIFIER EQUALS expression EOL
    (22) function_def_stmt -> . FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt
    (33) function_call_stmt -> . function_call EOL
    (38) if_stmt -> . IF LPAREN expression RPAREN block_stmt
    (39) if_stmt -> . IF LPAREN expression RPAREN block_stmt ELSE block_stmt
    (40) while_stmt -> . WHILE LPAREN expression RPAREN block_stmt
    (41) return_stmt -> . RETURN expression EOL
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    RBRACKET        reduce using rule 61 (empty -> .)
    IDENTIFIER      shift and go to state 12
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    statement_list_opt             shift and go to state 99
    statement_list                 shift and go to state 100
    empty                          shift and go to state 101
    statement                      shift and go to state 3
    declaration_stmt               shift and go to state 4
    assignment_stmt                shift and go to state 5
    function_def_stmt              shift and go to state 6
    function_call_stmt             shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    return_stmt                    shift and go to state 10
    type_specifier                 shift and go to state 11
    function_call                  shift and go to state 14
    callable                       shift and go to state 25

state 93

    (40) while_stmt -> WHILE LPAREN expression RPAREN block_stmt .

    IDENTIFIER      reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    FUNCTION        reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    IF              reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    WHILE           reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    RETURN          reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    INT_TYPE        reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    FLOAT_TYPE      reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    STRING_TYPE     reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    BOOL_TYPE       reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    DATE_TYPE       reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    TIME_TYPE       reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    VOID            reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    BOOK            reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    GEN             reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    REG             reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    DISPLAY         reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    $end            reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)
    RBRACKET        reduce using rule 40 (while_stmt -> WHILE LPAREN expression RPAREN block_stmt .)


state 94

    (35) arg_list -> arg_list COMMA expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . LE expression
    (47) expression -> expression . GE expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . EQ expression
    (51) expression -> expression . NEQ expression

    RPAREN          reduce using rule 35 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 35 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 95

    (26) param -> type_specifier IDENTIFIER .

    RPAREN          reduce using rule 26 (param -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 26 (param -> type_specifier IDENTIFIER .)


state 96

    (22) function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN . block_stmt
    (27) block_stmt -> . LBRACKET statement_list_opt RBRACKET

    LBRACKET        shift and go to state 92

    block_stmt                     shift and go to state 102

state 97

    (23) param_list -> param_list COMMA . param
    (26) param -> . type_specifier IDENTIFIER
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID

    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24

    param                          shift and go to state 103
    type_specifier                 shift and go to state 87

state 98

    (39) if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE . block_stmt
    (27) block_stmt -> . LBRACKET statement_list_opt RBRACKET

    LBRACKET        shift and go to state 92

    block_stmt                     shift and go to state 104

state 99

    (27) block_stmt -> LBRACKET statement_list_opt . RBRACKET

    RBRACKET        shift and go to state 105


state 100

    (4) statement_list_opt -> statement_list .
    (2) statement_list -> statement_list . statement
    (6) statement -> . declaration_stmt
    (7) statement -> . assignment_stmt
    (8) statement -> . function_def_stmt
    (9) statement -> . function_call_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . return_stmt
    (13) declaration_stmt -> . type_specifier IDENTIFIER EQUALS expression EOL
    (21) assignment_stmt -> . IDENTIFIER EQUALS expression EOL
    (22) function_def_stmt -> . FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt
    (33) function_call_stmt -> . function_call EOL
    (38) if_stmt -> . IF LPAREN expression RPAREN block_stmt
    (39) if_stmt -> . IF LPAREN expression RPAREN block_stmt ELSE block_stmt
    (40) while_stmt -> . WHILE LPAREN expression RPAREN block_stmt
    (41) return_stmt -> . RETURN expression EOL
    (14) type_specifier -> . INT_TYPE
    (15) type_specifier -> . FLOAT_TYPE
    (16) type_specifier -> . STRING_TYPE
    (17) type_specifier -> . BOOL_TYPE
    (18) type_specifier -> . DATE_TYPE
    (19) type_specifier -> . TIME_TYPE
    (20) type_specifier -> . VOID
    (34) function_call -> . callable LPAREN arg_list RPAREN
    (28) callable -> . IDENTIFIER
    (29) callable -> . BOOK
    (30) callable -> . GEN
    (31) callable -> . REG
    (32) callable -> . DISPLAY

    RBRACKET        reduce using rule 4 (statement_list_opt -> statement_list .)
    IDENTIFIER      shift and go to state 12
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INT_TYPE        shift and go to state 18
    FLOAT_TYPE      shift and go to state 19
    STRING_TYPE     shift and go to state 20
    BOOL_TYPE       shift and go to state 21
    DATE_TYPE       shift and go to state 22
    TIME_TYPE       shift and go to state 23
    VOID            shift and go to state 24
    BOOK            shift and go to state 26
    GEN             shift and go to state 27
    REG             shift and go to state 28
    DISPLAY         shift and go to state 29

    statement                      shift and go to state 30
    declaration_stmt               shift and go to state 4
    assignment_stmt                shift and go to state 5
    function_def_stmt              shift and go to state 6
    function_call_stmt             shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    return_stmt                    shift and go to state 10
    type_specifier                 shift and go to state 11
    function_call                  shift and go to state 14
    callable                       shift and go to state 25

state 101

    (5) statement_list_opt -> empty .

    RBRACKET        reduce using rule 5 (statement_list_opt -> empty .)


state 102

    (22) function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .

    IDENTIFIER      reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    FUNCTION        reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    IF              reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    WHILE           reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    RETURN          reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    INT_TYPE        reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    FLOAT_TYPE      reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    STRING_TYPE     reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    BOOL_TYPE       reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    DATE_TYPE       reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    TIME_TYPE       reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    VOID            reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    BOOK            reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    GEN             reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    REG             reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    DISPLAY         reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    $end            reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)
    RBRACKET        reduce using rule 22 (function_def_stmt -> FUNCTION type_specifier IDENTIFIER LPAREN param_list RPAREN block_stmt .)


state 103

    (23) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 23 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 23 (param_list -> param_list COMMA param .)


state 104

    (39) if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .

    IDENTIFIER      reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    FUNCTION        reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    IF              reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    WHILE           reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    RETURN          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    INT_TYPE        reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    FLOAT_TYPE      reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    STRING_TYPE     reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    BOOL_TYPE       reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    DATE_TYPE       reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    TIME_TYPE       reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    VOID            reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    BOOK            reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    GEN             reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    REG             reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    DISPLAY         reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    $end            reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)
    RBRACKET        reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN block_stmt ELSE block_stmt .)


state 105

    (27) block_stmt -> LBRACKET statement_list_opt RBRACKET .

    ELSE            reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    IDENTIFIER      reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    FUNCTION        reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    IF              reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    WHILE           reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    RETURN          reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    INT_TYPE        reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    FLOAT_TYPE      reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    STRING_TYPE     reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    BOOL_TYPE       reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    DATE_TYPE       reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    TIME_TYPE       reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    VOID            reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    BOOK            reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    GEN             reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    REG             reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    DISPLAY         reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    $end            reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)
    RBRACKET        reduce using rule 27 (block_stmt -> LBRACKET statement_list_opt RBRACKET .)

