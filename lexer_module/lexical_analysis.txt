LEXICAL ANALYSIS
================

Line 5: INT_TYPE(int)
Line 5: IDENTIFIER(maxSeats)
Line 5: EQUALS(=)
Line 5: NUMBER(100)
Line 5: EOL(.)
Line 6: FLOAT_TYPE(float)
Line 6: IDENTIFIER(ticketPrice)
Line 6: EQUALS(=)
Line 6: FLOAT_NUM(299.99)
Line 6: EOL(.)
Line 7: STRING_TYPE(string)
Line 7: IDENTIFIER(flightNumber)
Line 7: EQUALS(=)
Line 7: STRING_LITERAL(FL123)
Line 7: EOL(.)
Line 8: BOOL_TYPE(bool)
Line 8: IDENTIFIER(isInternational)
Line 8: EQUALS(=)
Line 8: IDENTIFIER(true)
Line 8: EOL(.)
Line 9: DATE_TYPE(date)
Line 9: IDENTIFIER(departureDate)
Line 9: EQUALS(=)
Line 9: DATE_VAL(2024-05-15)
Line 9: EOL(.)
Line 10: TIME_TYPE(time)
Line 10: IDENTIFIER(departureTime)
Line 10: EQUALS(=)
Line 10: TIME_VAL(10:30:00)
Line 10: EOL(.)
Line 13: FUNCTION(function)
Line 13: FLOAT_TYPE(float)
Line 13: IDENTIFIER(calculateTotalPrice)
Line 13: LPAREN(()
Line 13: FLOAT_TYPE(float)
Line 13: IDENTIFIER(basePrice)
Line 13: COMMA(,)
Line 13: FLOAT_TYPE(float)
Line 13: IDENTIFIER(taxRate)
Line 13: RPAREN())
Line 13: LBRACKET([)
Line 14: FLOAT_TYPE(float)
Line 14: IDENTIFIER(taxAmount)
Line 14: EQUALS(=)
Line 14: IDENTIFIER(basePrice)
Line 14: TIMES(*)
Line 14: IDENTIFIER(taxRate)
Line 14: EOL(.)
Line 15: RETURN(return)
Line 15: IDENTIFIER(basePrice)
Line 15: PLUS(+)
Line 15: IDENTIFIER(taxAmount)
Line 15: EOL(.)
Line 16: RBRACKET(])
Line 19: FUNCTION(function)
Line 19: BOOL_TYPE(bool)
Line 19: IDENTIFIER(checkAvailability)
Line 19: LPAREN(()
Line 19: INT_TYPE(int)
Line 19: IDENTIFIER(requestedSeats)
Line 19: RPAREN())
Line 19: LBRACKET([)
Line 20: IF(if)
Line 20: LPAREN(()
Line 20: IDENTIFIER(requestedSeats)
Line 20: LE(<=)
Line 20: IDENTIFIER(maxSeats)
Line 20: RPAREN())
Line 20: LBRACKET([)
Line 21: RETURN(return)
Line 21: IDENTIFIER(true)
Line 21: EOL(.)
Line 22: RBRACKET(])
Line 22: ELSE(else)
Line 22: LBRACKET([)
Line 23: RETURN(return)
Line 23: IDENTIFIER(false)
Line 23: EOL(.)
Line 24: RBRACKET(])
Line 25: RBRACKET(])
Line 28: FUNCTION(function)
Line 28: VOID(void)
Line 28: IDENTIFIER(displayConfirmation)
Line 28: LPAREN(()
Line 28: STRING_TYPE(string)
Line 28: IDENTIFIER(passengerName)
Line 28: COMMA(,)
Line 28: STRING_TYPE(string)
Line 28: IDENTIFIER(flightNum)
Line 28: RPAREN())
Line 28: LBRACKET([)
Line 29: STRING_TYPE(string)
Line 29: IDENTIFIER(message)
Line 29: EQUALS(=)
Line 29: STRING_LITERAL(Booking confirmed for )
Line 29: PLUS(+)
Line 29: IDENTIFIER(passengerName)
Line 29: EOL(.)
Line 30: DISPLAY(display)
Line 30: LPAREN(()
Line 30: IDENTIFIER(message)
Line 30: RPAREN())
Line 30: EOL(.)
Line 31: DISPLAY(display)
Line 31: LPAREN(()
Line 31: STRING_LITERAL(Flight number: )
Line 31: PLUS(+)
Line 31: IDENTIFIER(flightNum)
Line 31: RPAREN())
Line 31: EOL(.)
Line 32: DISPLAY(display)
Line 32: LPAREN(()
Line 32: STRING_LITERAL(Departure: )
Line 32: RPAREN())
Line 32: EOL(.)
Line 33: DISPLAY(display)
Line 33: LPAREN(()
Line 33: IDENTIFIER(departureDate)
Line 33: RPAREN())
Line 33: EOL(.)
Line 34: DISPLAY(display)
Line 34: LPAREN(()
Line 34: IDENTIFIER(departureTime)
Line 34: RPAREN())
Line 34: EOL(.)
Line 35: RBRACKET(])
Line 38: FUNCTION(function)
Line 38: BOOL_TYPE(bool)
Line 38: IDENTIFIER(processBooking)
Line 38: LPAREN(()
Line 38: STRING_TYPE(string)
Line 38: IDENTIFIER(passengerName)
Line 38: COMMA(,)
Line 38: INT_TYPE(int)
Line 38: IDENTIFIER(seatCount)
Line 38: RPAREN())
Line 38: LBRACKET([)
Line 39: IF(if)
Line 39: LPAREN(()
Line 39: IDENTIFIER(checkAvailability)
Line 39: LPAREN(()
Line 39: IDENTIFIER(seatCount)
Line 39: RPAREN())
Line 39: RPAREN())
Line 39: LBRACKET([)
Line 40: FLOAT_TYPE(float)
Line 40: IDENTIFIER(totalCost)
Line 40: EQUALS(=)
Line 40: IDENTIFIER(calculateTotalPrice)
Line 40: LPAREN(()
Line 40: IDENTIFIER(ticketPrice)
Line 40: TIMES(*)
Line 40: IDENTIFIER(seatCount)
Line 40: COMMA(,)
Line 40: FLOAT_NUM(0.1)
Line 40: RPAREN())
Line 40: EOL(.)
Line 41: BOOK(book)
Line 41: LPAREN(()
Line 41: IDENTIFIER(flightNumber)
Line 41: COMMA(,)
Line 41: IDENTIFIER(passengerName)
Line 41: RPAREN())
Line 41: EOL(.)
Line 42: STRING_TYPE(string)
Line 42: IDENTIFIER(userId)
Line 42: EQUALS(=)
Line 42: GEN(gen)
Line 42: LPAREN(()
Line 42: STRING_LITERAL(USER)
Line 42: RPAREN())
Line 42: EOL(.)
Line 43: REG(reg)
Line 43: LPAREN(()
Line 43: IDENTIFIER(userId)
Line 43: COMMA(,)
Line 43: STRING_LITERAL(defaultPass)
Line 43: RPAREN())
Line 43: EOL(.)
Line 44: IDENTIFIER(maxSeats)
Line 44: EQUALS(=)
Line 44: IDENTIFIER(maxSeats)
Line 44: MINUS(-)
Line 44: IDENTIFIER(seatCount)
Line 44: EOL(.)
Line 45: IDENTIFIER(displayConfirmation)
Line 45: LPAREN(()
Line 45: IDENTIFIER(passengerName)
Line 45: COMMA(,)
Line 45: IDENTIFIER(flightNumber)
Line 45: RPAREN())
Line 45: EOL(.)
Line 46: RETURN(return)
Line 46: IDENTIFIER(true)
Line 46: EOL(.)
Line 47: RBRACKET(])
Line 47: ELSE(else)
Line 47: LBRACKET([)
Line 48: DISPLAY(display)
Line 48: LPAREN(()
Line 48: STRING_LITERAL(Booking failed - not enough seats)
Line 48: RPAREN())
Line 48: EOL(.)
Line 49: RETURN(return)
Line 49: IDENTIFIER(false)
Line 49: EOL(.)
Line 50: RBRACKET(])
Line 51: RBRACKET(])
Line 54: STRING_TYPE(string)
Line 54: IDENTIFIER(customerName)
Line 54: EQUALS(=)
Line 54: STRING_LITERAL(John Smith)
Line 54: EOL(.)
Line 55: INT_TYPE(int)
Line 55: IDENTIFIER(seatsNeeded)
Line 55: EQUALS(=)
Line 55: NUMBER(2)
Line 55: EOL(.)
Line 58: IF(if)
Line 58: LPAREN(()
Line 58: IDENTIFIER(isInternational)
Line 58: RPAREN())
Line 58: LBRACKET([)
Line 59: IDENTIFIER(ticketPrice)
Line 59: EQUALS(=)
Line 59: IDENTIFIER(ticketPrice)
Line 59: TIMES(*)
Line 59: FLOAT_NUM(1.5)
Line 59: EOL(.)
Line 60: RBRACKET(])
Line 63: INT_TYPE(int)
Line 63: IDENTIFIER(attempts)
Line 63: EQUALS(=)
Line 63: NUMBER(3)
Line 63: EOL(.)
Line 64: WHILE(while)
Line 64: LPAREN(()
Line 64: IDENTIFIER(attempts)
Line 64: GT(>)
Line 64: NUMBER(0)
Line 64: RPAREN())
Line 64: LBRACKET([)
Line 65: IF(if)
Line 65: LPAREN(()
Line 65: IDENTIFIER(processBooking)
Line 65: LPAREN(()
Line 65: IDENTIFIER(customerName)
Line 65: COMMA(,)
Line 65: IDENTIFIER(seatsNeeded)
Line 65: RPAREN())
Line 65: RPAREN())
Line 65: LBRACKET([)
Line 66: DISPLAY(display)
Line 66: LPAREN(()
Line 66: STRING_LITERAL(Booking successful)
Line 66: RPAREN())
Line 66: EOL(.)
Line 67: IDENTIFIER(attempts)
Line 67: EQUALS(=)
Line 67: NUMBER(0)
Line 67: EOL(.)
Line 68: RBRACKET(])
Line 68: ELSE(else)
Line 68: LBRACKET([)
Line 69: IDENTIFIER(attempts)
Line 69: EQUALS(=)
Line 69: IDENTIFIER(attempts)
Line 69: MINUS(-)
Line 69: NUMBER(1)
Line 69: EOL(.)
Line 70: IF(if)
Line 70: LPAREN(()
Line 70: IDENTIFIER(attempts)
Line 70: GT(>)
Line 70: NUMBER(0)
Line 70: RPAREN())
Line 70: LBRACKET([)
Line 71: DISPLAY(display)
Line 71: LPAREN(()
Line 71: STRING_LITERAL(Retrying booking...)
Line 71: RPAREN())
Line 71: EOL(.)
Line 72: RBRACKET(])
Line 72: ELSE(else)
Line 72: LBRACKET([)
Line 73: DISPLAY(display)
Line 73: LPAREN(()
Line 73: STRING_LITERAL(Maximum booking attempts reached)
Line 73: RPAREN())
Line 73: EOL(.)
Line 74: RBRACKET(])
Line 75: RBRACKET(])
Line 76: RBRACKET(])
